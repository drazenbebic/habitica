generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model GitHubInstallations {
  uuid           String        @id @default(uuid()) @map("uuid") @db.VarChar(36)
  code           String        @map("code") @db.VarChar(20)
  installationId Int           @unique @map("installation_id") @db.Integer()
  suspended      Boolean?      @default(false) @map("suspended") @db.Boolean
  gitHubUsers    GitHubUsers[] @relation("GithubInstallationsGithubUsers")

  @@map(name: "hbtc_github_installations")
}

model GitHubUsers {
  uuid                  String              @id @default(uuid()) @map("uuid") @db.VarChar(36)
  installation          GitHubInstallations @relation("GithubInstallationsGithubUsers", fields: [installationUuid], references: [uuid])
  installationUuid      String              @unique @map("installation_uuid") @db.VarChar(36)
  login                 String              @unique @map("login") @db.VarChar(255)
  id                    Int                 @unique @map("id") @db.Integer
  nodeId                String              @map("node_id") @db.VarChar(20)
  avatarUrl             String?             @map("avatar_url") @db.VarChar(255)
  gravatarId            String?             @map("gravatar_id") @db.VarChar(255)
  htmlUrl               String?             @map("html_url") @db.VarChar(255)
  type                  String              @map("type") @db.VarChar(255)
  name                  String?             @map("name") @db.VarChar(255)
  company               String?             @map("company") @db.VarChar(255)
  blog                  String?             @map("blog") @db.VarChar(255)
  location              String?             @map("location") @db.VarChar(255)
  email                 String?             @map("email") @db.VarChar(255)
  accessToken           String?             @map("access_token") @db.VarChar(255)
  expiresIn             Int?                @map("expires_in") @db.Integer
  refreshToken          String?             @map("refresh_token") @db.VarChar(255)
  refreshTokenExpiresIn Int?                @map("refresh_token_expires_in") @db.Integer
  scope                 String?             @map("scope") @db.VarChar(255)
  tokenType             String?             @map("token_type") @db.VarChar(20)
  habiticaUser          HabiticaUsers?      @relation("HabiticaUsersGithubUsers")

  @@map(name: "hbtc_github_users")
}

model HabiticaUsers {
  uuid           String      @id @default(uuid()) @map("uuid") @db.VarChar(36)
  gitHubUser     GitHubUsers @relation("HabiticaUsersGithubUsers", fields: [gitHubUserUuid], references: [uuid])
  gitHubUserUuid String      @unique @map("github_user_uuid") @db.VarChar(36)
  userId         String      @unique @map("user_id") @db.VarChar(255)
  apiToken       String      @map("api_token") @db.VarChar(255)

  @@map(name: "hbtc_habitica_users")
}

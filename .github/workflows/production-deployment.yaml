name: "Production Deployment"

concurrency:
  group: habitica-integration

on:
  workflow_dispatch:
  push:
    branches:
      - main

#env:
#  REGISTRY: ghcr.io
#  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-build:
    name: "Lint & Build"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
      - name: "Install dependencies"
        run: yarn --frozen-lockfile
      - name: "Lint"
        run: yarn lint
      - name: "Build"
        run: |
          yarn core:build
          yarn github-app:build

  push-to-ecr:
    needs: [ 'lint-and-build' ]
    name: "Push to AWS ECR"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
      - name: "Extract metadata (tags, labels) for ECR"
        id: meta
        uses: docker/metadata-action@v5
      - name: "Log in to AWS ECR"
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY }}
          password: ${{ secrets.AWS_ACCESS_SECRET }}
      - name: "Build and push to ECR"
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ github.repository }}:${{ steps.meta.outputs.tags }}
          labels: |
            maintainer=${{ github.actor }}
            commit=${{ github.sha }}

#  deploy-to-ionos:
#    needs: [ 'build-and-push' ]
#    name: "Deploy to IONOS"
#    runs-on: ubuntu-latest
#    steps:
#      - name: 'Stop existing container'
#        continue-on-error: true
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.SSH_HOST }}
#          username: ${{ secrets.SSH_USER }}
#          password: ${{ secrets.SSH_PASSWORD }}
#          port: 22
#          script: |
#            docker stop habitica
#            docker rm habitica
#            docker image rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
#      - name: 'Start new container'
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.SSH_HOST }}
#          username: ${{ secrets.SSH_USER }}
#          password: ${{ secrets.SSH_PASSWORD }}
#          port: 22
#          script: |
#            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
#            docker run -d \
#              --name habitica \
#              --network host \
#              -e PORT='3002' \
#              -e NODE_ENV='production' \
#              -e HABITICA_USER_ID='${{ secrets.HABITICA_USER_ID }}' \
#              -e HABITICA_API_TOKEN='${{ secrets.HABITICA_API_TOKEN }}' \
#              -e DB_USER='${{ secrets.DB_USER }}' \
#              -e DB_PASS='${{ secrets.DB_PASS }}' \
#              -e DB_NAME='${{ secrets.DB_NAME }}' \
#              -e DB_PORT='${{ secrets.DB_PORT }}' \
#              -e DB_URL='${{ secrets.DB_URL }}' \
#              -p 3002:3000 \
#              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main